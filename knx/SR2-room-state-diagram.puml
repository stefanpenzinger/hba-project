@startuml
title SRA2 Room State Diagram

[*] --> Dead

state "System running" as SR

Dead --> SR : powerOn
SR --> Dead : powerOff

state SR {

  state "Presence Sensor" as PS {
     state "Enabled" as sensor_enabled {
      state "No presence" as no_presence
      state "Presence" as presence

      [*] --> no_presence : (init)

      no_presence --> presence : presence \n/emit presenceDetected()
      presence --> no_presence : noPresence \n/emit presenceLost()
    }

    [*] --> sensor_enabled : (init)

    state "Disabled" as sensor_disabled
    sensor_disabled --> sensor_enabled : enableSensor \n/receive brightnessEvent_turnOn()
    sensor_enabled --> sensor_disabled : disableSensor \n/receive brightnessEvent_turnOff()
  }

  --

  state "Light Control" as LC {
    state "Lights off" as lights_off
    state "Lights on" as lights_on

    [*] --> lights_off : (init)
    lights_off --> lights_on : switch lights on \n/receive presenceDetected()
    lights_off --> lights_on : switch lights on \n/receive brightnessEvent_turnOn()
    lights_on --> lights_off : switch lights off \n/receive presenceLost()
    lights_on --> lights_off : switch lights off \n/receive brightnessEvent_turnOff()
  }

  --

  state "Weather Module" as WM {
    state "Measuring brightness" as measuring_brightness {
        state "Brightness for lights and presence sensor" as brightness {
            state "Below threshold" as below_threshold_l_and_ps
            state "Above threshold" as above_threshold_l_and_ps

            [*] --> below_threshold_l_and_ps : (init)
            below_threshold_l_and_ps --> above_threshold_l_and_ps : brightness >= 60 \n/ emit brightnessEvent_turnOff()
            above_threshold_l_and_ps --> below_threshold_l_and_ps : brightness < 60 \n/ emit brightnessEvent_turnOn()
        }

        ||

        state "Brightness for blinds" as brightness_blinds {
            state "Below threshold" as below_threshold_blinds
            state "Above threshold" as above_threshold_blinds

            [*] --> below_threshold_blinds : (init)
            below_threshold_blinds --> above_threshold_blinds : brightness >= 65 \n/ emit brightnessEvent_blindsDown()
            above_threshold_blinds --> below_threshold_blinds : brightness < 65 \n/ emit brightnessEvent_blindsUp()
        }

    }

    [*] --> measuring_brightness : (init)
  }

  --

  state "Blinds Control" as BC {
    state "Blinds up" as blinds_up
    state "Blinds down" as blinds_down

    [*] --> blinds_up : (init)
    blinds_up --> blinds_down : blindsDown \n/receive brightnessEvent_blindsDown()
    blinds_down --> blinds_up : blindsUp \n/receive brightnessEvent_blindsUp()
  }
}
@enduml


